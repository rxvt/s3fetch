[project]
name = "s3fetch"
dynamic = ["version"]
description = "Simple & fast multi-threaded S3 download tool."
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
keywords = ["aws", "s3"]
authors = [
  { name = "Shane Anderson", email = "shane@reactivate.cx" },
]
classifiers = [
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = [
  "boto3~=1.34.144",
  "boto3-stubs[s3]",
  "click~=8.1.0",
]

[tool.hatch.env]
requires = [
  "hatch-pip-compile",
]

[tool.hatch.envs.default]
description = """
General development environment.
"""
type = "pip-compile"
python = "3.9"
extra-dependencies = [
  "pytest~=8.2.0",
  "pytest-mock~=3.12.0",
  "moto[s3]~=5.0.0",
  "pre-commit~=3.7.0",
  "mypy",
  "ruff~=0.9.4",
]

[tool.hatch.envs.hatch-test]
description = """Testing environment."""
type = "pip-compile"
extra-dependencies = [
  "moto[s3]~=5.0.0",
  "pytest~=8.2.0",
  "pytest-mock~=3.12.0",
]

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.12", "3.11", "3.10", "3.9"]

[tool.hatch.envs.default.scripts]
check_types = "mypy --install-types --non-interactive {args:src/s3fetch tests}"
test_unit = "pytest tests/unit"
test_integration = "pytest tests/integration"
test_e2e = "pytest tests/e2e"
test_regex = "rm -rf '{root}/tmp/' && mkdir -p '{root}/tmp' && s3fetch -r '^large' --download-dir '{root}/tmp' s3://s3fetch-ci-test-bucket/"
test_regex = "rm -rf '{root}/tmp/' && mkdir -p '{root}/tmp' && s3fetch --regex '^large' --download-dir '{root}/tmp' s3://s3fetch-ci-test-bucket/"
test_dryrun = "rm -rf '{root}/tmp/' && mkdir -p '{root}/tmp' && s3fetch --dry-run --download-dir '{root}/tmp' s3://s3fetch-ci-test-bucket/"

[project.urls]
Source = "https://github.com/rxvt/s3fetch"
Issues = "https://github.com/rxvt/s3fetch/issues"
Documentation = "https://github.com/rxvt/s3fetch#readme"

[tool.hatch.version]
path = "src/s3fetch/__init__.py"

[project.scripts]
s3fetch = 's3fetch.cli:cli'

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["s3fetch"]

[tool.coverage.report]
show_missing = true
# fail_under = 100

[tool.mypy]
python_version = "3.9"
ignore_missing_imports = true
files = "src/s3fetch, tests"

[[tool.mypy.overrides]]
module = ["s3fetch", "pkg_resources"]
ignore_missing_imports = true

[tool.ruff]
target-version = "py39"

[tool.ruff.lint]
select = [
    # ANN Enable flake8-annotations warnings
    # B, B9 Enable flake8-bugbear. B9 is required for Bugbearâ€™s more opinionated warnings.
    # C Enable mccabe warnings
    # D Enable flake8-docstring (pydocstyle) warnings
    # E, W Enable pycodestyle warnings
    # F Enable pyflakes warnings
    # I Enable flake8-isort warnings
    # S Enable flake8-bandit warnings
    "ANN",
    "B",
    "B9",
    "C",
    "D",
    "E",
    "W",
    "F",
    "I",
    "S"
]
ignore = [
    "ANN204", # Ignore return type annotation for special methods
    ]

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "google"

# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104"]
"tests/unit/test_s3fetch_old.py" = ["ALL"]  # Remove after all tests migrated
"tests/*" = [
    "ANN201",  # Ignore missing return types for test functions
    "ANN001",  # Ignore missing type annotations for test functions
    "D103",  # Ignore missing docstrings in test functions as the function name should be descriptive.
    "D100",
    "S101"  # Ignore use of 'assert'
    ]

[tool.pyright]
reportUnusedCallResult = false
typeCheckingMode = "basic"
